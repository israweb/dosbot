#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from datetime import datetime, timedelta
import os
import warnings
warnings.filterwarnings('ignore')

class ZigZagPeriodPlotter:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∑–∏–≥–∑–∞–≥–∞ —Å –æ—Ç—á–µ—Ç–∞–º–∏.
    """
    
    def __init__(self, data_file="processed_data/ml_data.csv"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–æ—Ç—Ç–µ—Ä–∞.
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        - data_file: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è ML
        """
        self.data_file = data_file
        self.data = None
        self.zigzag_column = None
        self.charts_dir = "charts/zigzag"
        self.report_data = []
        
    def load_data(self):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞.
        """
        print(f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ {self.data_file}...")
        
        try:
            self.data = pd.read_csv(self.data_file)
            
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        if 'Open time' not in self.data.columns:
            print("‚ùå –ö–æ–ª–æ–Ω–∫–∞ 'Open time' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return False
            
        # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫—É –∑–∏–≥–∑–∞–≥–∞
        zigzag_columns = [col for col in self.data.columns if 'zigzag' in col.lower()]
        if zigzag_columns:
            self.zigzag_column = zigzag_columns[0]
            print(f"‚úì –ù–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ –∑–∏–≥–∑–∞–≥–∞: {self.zigzag_column}")
        else:
            print("‚ùå –ö–æ–ª–æ–Ω–∫–∞ –∑–∏–≥–∑–∞–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return False
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤ datetime
            self.data['datetime'] = pd.to_datetime(self.data['Open time'])
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
            if not os.path.exists(self.charts_dir):
                os.makedirs(self.charts_dir)
                print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {self.charts_dir}")
            
            print(f"‚úì –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {len(self.data)} –∑–∞–ø–∏—Å–µ–π")
            print(f"‚úì –ü–µ—Ä–∏–æ–¥: {self.data['datetime'].min()} - {self.data['datetime'].max()}")
            
            return True
            
        except FileNotFoundError:
            print(f"‚ùå –§–∞–π–ª {self.data_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            print("üí° –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python data_for_ml_maker.py")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def split_data_into_periods(self, months=3):
        """
        –†–∞–∑–±–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ø–µ—Ä–∏–æ–¥—ã –ø–æ 3 –º–µ—Å—è—Ü–∞.
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        - months: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤ –≤ –ø–µ—Ä–∏–æ–¥–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3)
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        - —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–∏–æ–¥–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏
        """
        if self.data is None:
            return []
        
        periods = []
        start_date = self.data['datetime'].min()
        end_date = self.data['datetime'].max()
        
        current_start = start_date
        period_num = 1
        
        while current_start < end_date:
            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞
            current_end = current_start + timedelta(days=months*30)  # –ü—Ä–∏–º–µ—Ä–Ω–æ 3 –º–µ—Å—è—Ü–∞
            
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω–µ—Ü –¥–∞–Ω–Ω—ã—Ö
            if current_end > end_date:
                current_end = end_date
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            period_mask = (self.data['datetime'] >= current_start) & (self.data['datetime'] < current_end)
            period_data = self.data[period_mask].copy()
            
            if len(period_data) > 0:
                period_info = {
                    'period_num': period_num,
                    'start_date': current_start,
                    'end_date': current_end,
                    'data': period_data
                }
                periods.append(period_info)
                period_num += 1
            
            current_start = current_end
        
        print(f"‚úì –î–∞–Ω–Ω—ã–µ —Ä–∞–∑–±–∏—Ç—ã –Ω–∞ {len(periods)} –ø–µ—Ä–∏–æ–¥–æ–≤ –ø–æ {months} –º–µ—Å—è—Ü–∞")
        return periods
    
    def analyze_zigzag_period(self, period_data):
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∏–≥–∑–∞–≥–∏ –≤ –ø–µ—Ä–∏–æ–¥–µ.
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        - period_data: –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥–∞
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        - —Å–ª–æ–≤–∞—Ä—å —Å –∞–Ω–∞–ª–∏–∑–æ–º –∑–∏–≥–∑–∞–≥–æ–≤
        """
        # –ù–∞—Ö–æ–¥–∏–º —Ç–æ—á–∫–∏ –∑–∏–≥–∑–∞–≥–∞
        zigzag_points = period_data[period_data[self.zigzag_column] != 0]
        
        if len(zigzag_points) == 0:
            return {
                'zigzag_count': 0,
                'avg_distance': 0,
                'min_distance': 0,
                'max_distance': 0
            }
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏ –∑–∏–≥–∑–∞–≥–∞
        distances = []
        for i in range(1, len(zigzag_points)):
            prev_price = zigzag_points.iloc[i-1]['Close']
            curr_price = zigzag_points.iloc[i]['Close']
            distance = abs(curr_price - prev_price)
            distances.append(distance)
        
        if distances:
            avg_distance = np.mean(distances)
            min_distance = np.min(distances)
            max_distance = np.max(distances)
        else:
            avg_distance = min_distance = max_distance = 0
        
        return {
            'zigzag_count': len(zigzag_points),
            'avg_distance': avg_distance,
            'min_distance': min_distance,
            'max_distance': max_distance
        }
    
    def plot_period_chart(self, period_data, period_info, save_path):
        """
        –°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞.
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        - period_data: –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥–∞
        - period_info: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–∏–æ–¥–µ
        - save_path: –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        """
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        fig, ax = plt.subplots(1, 1, figsize=(16, 8))
        
        # –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã
        ax.plot(period_data['datetime'], period_data['Close'], 
                color='blue', alpha=0.7, linewidth=1, label='–¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è')
        
        # –°–æ–µ–¥–∏–Ω—è–µ–º —Ç–æ—á–∫–∏ –∑–∏–≥–∑–∞–≥–∞ –ª–∏–Ω–∏—è–º–∏
        zigzag_data = period_data[period_data[self.zigzag_column] != 0]
        if len(zigzag_data) > 1:
            zigzag_prices = []
            for _, row in zigzag_data.iterrows():
                if row[self.zigzag_column] == -1:  # –ú–∞–∫—Å–∏–º—É–º
                    zigzag_prices.append(row['High'])
                else:  # –ú–∏–Ω–∏–º—É–º
                    zigzag_prices.append(row['Low'])
            
            ax.plot(zigzag_data['datetime'], zigzag_prices, 
                    color='orange', linewidth=2, alpha=0.8, label='–ó–∏–≥–∑–∞–≥')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞
        start_str = period_info['start_date'].strftime('%Y-%m')
        end_str = period_info['end_date'].strftime('%Y-%m')
        ax.set_title(f'BTC/USDT - –¶–µ–Ω–∞ –∏ ZigZag ({start_str} - {end_str})', 
                     fontsize=16, fontweight='bold')
        ax.set_ylabel('–¶–µ–Ω–∞ (USDT)', fontsize=12)
        ax.set_xlabel('–í—Ä–µ–º—è', fontsize=12)
        ax.grid(True, alpha=0.3)
        ax.legend(loc='upper left')
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–∏ –≤—Ä–µ–º–µ–Ω–∏ - —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞
        ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m'))
        ax.xaxis.set_major_locator(mdates.MonthLocator())
        plt.setp(ax.get_xticklabels(), rotation=45, ha='right')
        
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        plt.savefig(save_path, dpi=300, bbox_inches='tight')
        plt.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
        
        print(f"‚úì –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {save_path}")
    
    def save_report(self, report_path="charts/zigzag/zigzag_analysis_report.txt"):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª.
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        - report_path: –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞
        """
        with open(report_path, 'w', encoding='utf-8') as f:
            f.write("–û–¢–ß–ï–¢ –ü–û –ê–ù–ê–õ–ò–ó–£ –ó–ò–ì–ó–ê–ì–û–í –ü–û –ü–ï–†–ò–û–î–ê–ú\n")
            f.write("=" * 60 + "\n")
            f.write(f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"–í—Å–µ–≥–æ –ø–µ—Ä–∏–æ–¥–æ–≤: {len(self.report_data)}\n\n")
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
            f.write(f"{'–ü–µ—Ä–∏–æ–¥':<15} {'–ù–∞—á–∞–ª–æ':<12} {'–ö–æ–Ω–µ—Ü':<12} {'–ó–∏–≥–∑–∞–≥–æ–≤':<10} {'–°—Ä.—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ':<15} {'–ú–∏–Ω.—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ':<15} {'–ú–∞–∫—Å.—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ':<15}\n")
            f.write("-" * 100 + "\n")
            
            total_zigzags = 0
            for report in self.report_data:
                f.write(f"{report['period']:<15} {report['start_date']:<12} {report['end_date']:<12} "
                       f"{report['zigzag_count']:<10} {report['avg_distance']:<15.2f} "
                       f"{report['min_distance']:<15.2f} {report['max_distance']:<15.2f}\n")
                total_zigzags += report['zigzag_count']
            
            f.write("-" * 100 + "\n")
            f.write(f"{'–ò–¢–û–ì–û':<15} {'':<12} {'':<12} {total_zigzags:<10} {'':<15} {'':<15} {'':<15}\n\n")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            if self.report_data:
                avg_zigzags_per_period = total_zigzags / len(self.report_data)
                periods_with_zigzags = sum(1 for r in self.report_data if r['zigzag_count'] > 0)
                max_zigzags_in_period = max(r['zigzag_count'] for r in self.report_data)
                min_zigzags_in_period = min(r['zigzag_count'] for r in self.report_data)
                
                f.write("–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n")
                f.write("-" * 30 + "\n")
                f.write(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∏–≥–∑–∞–≥–æ–≤: {total_zigzags}\n")
                f.write(f"–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∏–≥–∑–∞–≥–æ–≤ –Ω–∞ –ø–µ—Ä–∏–æ–¥: {avg_zigzags_per_period:.2f}\n")
                f.write(f"–ü–µ—Ä–∏–æ–¥–æ–≤ —Å –∑–∏–≥–∑–∞–≥–∞–º–∏: {periods_with_zigzags} –∏–∑ {len(self.report_data)}\n")
                f.write(f"–ú–∞–∫—Å–∏–º—É–º –∑–∏–≥–∑–∞–≥–æ–≤ –≤ –ø–µ—Ä–∏–æ–¥–µ: {max_zigzags_in_period}\n")
                f.write(f"–ú–∏–Ω–∏–º—É–º –∑–∏–≥–∑–∞–≥–æ–≤ –≤ –ø–µ—Ä–∏–æ–¥–µ: {min_zigzags_in_period}\n")
        
        print(f"‚úì –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
    
    def create_period_charts(self):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –æ—Ç—á–µ—Ç–æ–≤.
        """
        print("–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∑–∏–≥–∑–∞–≥–∞")
        print("=" * 60)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if not self.load_data():
            return
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø–µ—Ä–∏–æ–¥—ã
        periods = self.split_data_into_periods(months=3)
        
        if not periods:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ø–µ—Ä–∏–æ–¥—ã!")
            return
        
        total_zigzags = 0
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø–µ—Ä–∏–æ–¥
        for period_info in periods:
            period_data = period_info['data']
            period_num = period_info['period_num']
            start_date = period_info['start_date']
            end_date = period_info['end_date']
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∏–≥–∑–∞–≥–∏ –≤ –ø–µ—Ä–∏–æ–¥–µ
            analysis = self.analyze_zigzag_period(period_data)
            zigzag_count = analysis['zigzag_count']
            avg_distance = analysis['avg_distance']
            
            total_zigzags += zigzag_count
            
            # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
            start_str = start_date.strftime('%Y-%m')
            end_str = end_date.strftime('%Y-%m')
            print(f"–ü–µ—Ä–∏–æ–¥ {start_str}-{end_str}: {zigzag_count} –∑–∏–≥–∑–∞–≥–æ–≤, —Å—Ä–µ–¥–Ω–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {avg_distance:.2f}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
            self.report_data.append({
                'period': f"–ü–µ—Ä–∏–æ–¥ {period_num}",
                'start_date': start_str,
                'end_date': end_str,
                'zigzag_count': zigzag_count,
                'avg_distance': avg_distance,
                'min_distance': analysis['min_distance'],
                'max_distance': analysis['max_distance']
            })
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞
            chart_filename = f"zigzag_{start_str}.png"
            chart_path = os.path.join(self.charts_dir, chart_filename)
            self.plot_period_chart(period_data, period_info, chart_path)
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print(f"\n" + "=" * 60)
        print("–ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print("=" * 60)
        print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∏–≥–∑–∞–≥–æ–≤: {total_zigzags}")
        print(f"–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∏–≥–∑–∞–≥–æ–≤ –Ω–∞ –ø–µ—Ä–∏–æ–¥: {total_zigzags/len(periods):.2f}")
        print(f"–°–æ–∑–¥–∞–Ω–æ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {len(periods)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
        self.save_report()
        
        print(f"\n‚úì –í—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫—É: {self.charts_dir}")
        print("‚úì –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: charts/zigzag/zigzag_analysis_report.txt")

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤.
    """
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–ª–æ—Ç—Ç–µ—Ä
        plotter = ZigZagPeriodPlotter("processed_data/ml_data.csv")
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –æ—Ç—á–µ—Ç—ã
        plotter.create_period_charts()
        
        print("\n" + "=" * 60)
        print("‚úì –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 